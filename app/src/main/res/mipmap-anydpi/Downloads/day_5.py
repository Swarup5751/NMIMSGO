# -*- coding: utf-8 -*-
"""Day 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Fm-IGT_Vs1fnhJJ3JGjFq52gjdZI0WR
"""

# Object Oriented Programming

# class name should be start with capital letter
# function name should be start with small letter

class Human:
  ''' '''
  def name(self):
    name = input("Enter name : ")
    print("Hello I am ",self.name, id(name))

  def gender(self):
    gender = input("Enter Gender : ")
    print(f"Gender : ", self.gender)

h = Human()

print(h)

h.name()

h.gender()

# access modifiers / speciers

# 1. public
# 2. private
# 3. protected
# 4. default


# 1. public
# 2. private
# 3. strongly_private

class Human:

  name = "Dhanraj"   # public
  _phone = 44444444  # private
  __pin_no = 123     # strongly_private

h = Human()

h.name

h._phone

h.__pin_no

# print area of circle
# set_radius(), printArea()


class Circle:

  def set_radius(self):
    self.radius = int(input("Enter Radius : "))

  def print_area(self):
    print(f"Area of circle is : {3.14 * self.radius**2}")

c = Circle()

c.set_radius()

c.print_area()

c1 = Circle()

c1.set_radius()

c1.print_area()

# set_user_data(), display_user_data()
# name, age, city


class User:

  def set_user_data(self, name, age, city):
    self.name = name
    self.age = age
    self.city = city

  def display_user_data(self):
    print(f"Name : {self.name}\t Age : {self.age}\t City : {self.city}")

u = User()

user_list = list(map(str, input("Enter Name, age, city (separated by space) : ").split()))

u.set_user_data(*user_list)

u.display_user_data()

# Constructor :
# Syntax:
# def __init__(self):
#     pass

# set_user_data(), display_user_data()
# name, age, city


class User:

  name = "Dhanraj"
  age = 11
  city = "Shirput"
  def __init__(self, name, age, city):
    self.name = name
    self.age = age
    self.city = city

  def display_user_data(self):
    print(f"Name : {self.name}\t Age : {self.age}\t City : {self.city}")

u = User()

class User2:
  def __init__(self, name, age, city):
    self.name = name
    self.age = age
    self.city = city

  def display_user_data(self):
    print(f"Name : {self.name}\t Age : {self.age}\t City : {self.city}")

u = User("dhanraj", 12, "Surat")

u.display_user_data()

# define a class
# aadhar card, name, gender, address

# global aadhar_card_no

class DenaBank:

  account_no = 10002024000100

  def __init__(self, name, age, city, contact):
    self.name = name
    self.age = age
    self.city = city
    self.contact = contact
    DenaBank.account_no += 1
    self.acc_no = DenaBank.account_no

  def __str__(self):
    return "Account created successfully... Name : " + self.name + " Account No : " + str(self.acc_no)

bank = DenaBank("Dhanraj", "11", "Surat", "9999999")

print(bank)

bank1 = DenaBank("raj", "11", "Surat", "9999999")

print(bank1)

'''
Banking System

one must code banking system that can do
1.open account:
  take name,gender,and minimumbalance 3000 to open account.
  account number auto generated
  # class variable

2.check balance():
	1st read account number, search account, if found then show details

3.withdraw():
	check minimum balance should be kept 2000 else will not allow transection

4.deposit():
	read amount ,update balance but amount can not be -ve

2,3,4---one must give account number,search account and then
perform needed operations
'''

global_account_no = 100020240000100

class Account:

  def __init__(self, name, age, contact, address, amount):
    self.name = name
    self.age = age
    self.contact = contact
    self.address = address
    global global_account_no
    global_account_no += 1
    self.account_no = global_account_no


  def __str__(self):
    return "Name : " + self.name + "\n Account No : " + str(self.account_no) + "\nAge : " + str(self.age) + " \n Address : " + self.address

  def deposite(self, amount):
    if amount <= 0:
      return "Deposite amount is to less"
    else:
      self.amount += amount
      print("After last transation : ", self.amount)


  def withdraw(self, amount):
    if self.amount >= amount:
      return "Insufficient Balance"
    else:
      self.amount -= amount
      print("After last transation : ", self.amount)

user_data = (map(str, input("Enter Name , age, contact, address (separated by space) : ").split()))
user1 = Account(*user_data)

print(user1)

bank = {}

  name, age, contact, address

  amount

    minimum balance 3000

          if condition is true --> done
                          false --> please deposite at least 3000

bank = {}

# user_data = (map(str, input("Enter Name , age, contact, address (separated by space) : ").split()))
name = input("Enter name : ")
age = input("Enter name : ")
contact = input("Enter name : ")
address = input("Enter name : ")
while True:

  amount = int(input("Enter amount : "))

  if amount >= 3000:
    a = Account(name, age, contact, address, amount)
    bank[a.account_no] = a
    break
  else:
    print("Deposite at least 3000...")

# searching

user_acc = int(input('Enter Your Acc No : '))

bank_keys = bank.keys()


if user_acc in bank_keys:
  print("User Account Foun...")
  print(bank[user_acc])
else:
  print("User Account not Found")

# login

# create function -->

dict = {1 : ["name", "age", "city"], 2 : ["name", "age", "city"]}

def log_in(userName, password):
  if userName in dict.keys():
    if password == 1234:
      "withdraw, deposite, check balance, exit"
      # print(dict[userName])
      return True
    else:
      return False
      # print("invalid username and password")
  # else:
  #   print("Invalid card")


log_in(1, 1234)

log_in(1, 12345)

while True:

  yes_no = input("Do you want to open an applicatiok : ").upper()

  if yes_no == "Y":
    acc = int(input("Enter account : "))
    password = int(input("Enter password : "))

    if log_in(acc, password):
      print("Successfully login...")

      print('''
            1. Login
            2. New Account
      ''')

      log_new = int(input("Select Option : "))

      choice = int(input("1. Deposite amount \n2. Withdraw amount \n3. Check Balance"))

      if choice == 1:
        if choice == 1:
          account_number = int(input("Enter account number : "))
          amount = int(input("ENter amount : "))
          deposite(account_number, amount)
          print("Your amount is successfully deposite...")

      elif choice == 2:
        # create_account() ....create function

    else:
      print("invalid username and password")


  elif yes_no == "No":
    pass

  else:
    print("Invalid Input...")

# inheritance


class Parent:

  def property(self):
    print("2 flat / 2 kg / 1 car")


class Child(Parent):
  pass

c = Child()

c.property()

# inheritance

class GrandParent:

  def property1(self):
    print("10 chash / 2 kg gold")

class Parent(GrandParent):

  def property(self):
    print("2 flat / 2 kg / 1 car")


class Child(Parent):
  pass

class A:
  def add(self):
    print("first")

  def add(self):
    print("second")

a = A()

a.add()

# inheritance  --> one parent ---> 2 child classes

class Parent:

  def property1(self):
    print("10 chash / 2 kg gold")

class Child(Parent):

  def property(self):
    print("2 flat / 2 kg / 1 car")


class Child2(Parent):
  pass

c2 = Child()

c2.property()

# inheritance  --> one parent ---> 2 child classes

class Parent1:

  def property(self):
    print("10 chash / 2 kg gold")

class Parent2:

  def property(self):
    print("2 flat / 2 kg / 1 car")


class Child(Parent1, Parent2):
  pass

c= Child()

c.property()

# inheritance  --> one parent ---> 2 child classes

class Parent1:

  def property(self):
    print("10 chash / 2 kg gold")

class Parent2:

  def property(self):
    print("2 flat / 2 kg / 1 car")


class Child(Parent2, Parent1):
  pass

c= Child()

c.property()

# inheritance  --> one parent ---> 2 child classes

class Parent1:

  def marry(self):
    print("9tara / 3sha ")

class Child(Parent1):

  def marry(self):
    print("rashamika")

p = Parent1()
p.marry()

c = Child()
c.marry()

