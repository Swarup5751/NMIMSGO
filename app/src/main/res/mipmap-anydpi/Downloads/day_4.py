# -*- coding: utf-8 -*-
"""Day 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dc93Z7Wri6BPFrSqw2XXXZfSy_RgIFbw
"""

# Function

def shaadi():
  ''' create a function'''
  print("Vijay weds Rashamika")

shaadi()

# 1. positional
# 2. default
# 3. key, value
# 4. length size

# 1. positional argument


def shaadi(g, b):
  print(g , " weds ", b)

shaadi("9tara", "prajapati")

shaadi("3sha", "prajapati")

def intro(name, gender):
  print("name : ", name, "\ngender : ", gender )

intro("Dhanraj", "Male")

intro("Male", "Dhanraj")

def intro(name, gender):
  print("name : ", name, "\ngender : ", gender )

user_gender = input("Enter gender : ")
user_name = input("Enter name")
intro(name = user_name, gender = user_gender)

def intro(name, dream):
  print("name : ", name ,  " Dream : ", dream)

intro("dhanraj")

def intro(name, dream = "Engineer") :
  print("name : ", name ,  " Dream : ", dream)

intro("dhanraj")

intro("dhanraj", "s/w developer")

def hobbies(*hobby):
  print(hobby, type(hobby))



hobbies(input("Enter : "))

def hobbies(*hobby):

  counter = 1
  for h in hobby:
    print(f"{counter}. {h}")
    counter += 1

l = []
while True:
  hobby = input("Enter : ")

  if hobby == '':
    break
  else:
    l.append(hobby)


hobbies(*l)

def addition(num1, num2):
  print(f"Addition of {num1} and {num2} is : {num1 + num2}")

addition(10, 20)

result = addition(20, 20)
print(result)

print(addition(30, 40))

def addition1(num1, num2):
  return f"Addition of {num1} and {num2} is : {num1 + num2}"

print(addition(30, 40))

result = addition1(10, 10)

print(result)

2.	Find the Second Largest Element:
○	Question: Find the second largest element in an array.
○	Logic: Initialize two variables to store the largest and second-largest elements and iterate through the array.
○	Sample Input: [7, 3, 9, 2, 8]
○	Expected Output: Second Largest: 8

def second_largest(list):
  result = sorted(set(list))
  return result[-2]



print( second_largest([7, 3, 9, 2, 8, 8, 8, 9, 9, 9]))

# ○	Sample Input: [7, 3, 9, 2, 8, 8, 8, 9, 9, 9]
# ○	Expected Output: Second Largest: 9


def second_largest(list):
  result = sorted(list)
  return result[-2]



print( second_largest([7, 3, 9, 2, 8, 8, 8, 9, 9, 9]))

3.	Remove Duplicates from Unsorted Array:
○	Question: Write a function to remove duplicates from an unsorted array.
○	Logic: Use a hash set to keep track of unique elements as you iterate through the array.
○	Sample Input: [3, 2, 3, 1, 2, 4]
○	Expected Output: [3, 2, 1, 4]

5.	Intersection of Two Arrays:
○	Question: Find the intersection of two arrays.
○	Logic: Use a hash set to store one array's elements and check for common elements in the second array.
○	Sample Input: [1, 2, 2, 1] and [2, 2]
○	Expected Output: [2]



s = {1, 2, 3, 4}
s2 = {1, 4, 2, 5}
print(s & s2)

print(s - s2)

def intersection(list1, list2):
  return set(list1) & set(list2)


intersection([1, 2, 2, 1], [1, 2])

def intersection(list1, list2):

  if len(list1) <= 0 and len(list2) <= 0:
    return "List is empty"

  result_list = []
  for num in list1:
    if num in list2:
      result_list.append(num)

  return set(result_list)


intersection([1, 2, 2, 1], [1, 2])

# find first occurrence

Sample Test Case 1 : s1 = "Hello, Python",    s2 = "Python"
Expected output    : 7

Sample Test Case 1 : s1 = "Hello, world",    s2 = "Java"
Expected output    : -1

Sample Test Case 1 : s1 = "",    s2 = ""
Expected output    : -1

def first_occurrence(s1, s2):
  if len(s1) <= 0 and len(s2) <= 0:
    return -1
  return s1.find(s2)

s1 = "Hello, Python"
s2 = "Python"

first_occurrence(s1, s2)

def first_occurrence(s1, s2):
  if len(s1) <= 0 and len(s2) <= 0:
    return -1

  for letter in range(len(s1)):
    if s1[letter] == s2[0]:
      return letter

s1 = "Hello, Python"
s2 = "Python"

first_occurrence(s1, s2)

11.	Move Zeros to the End:
○	Question: Given an array, move all the zeros to the end without changing the order of non-zero elements.
○	Logic: Iterate through the array, moving non-zero elements to the front and filling the remaining space with zeros.
○	Sample Input: [0, 1, 0, 3, 12]
○	Expected Output: [1, 3, 12, 0, 0]

def moves_zeros(list):
  position = 0
  for index in list:
        if index != 0:
            list[position] = index
            position += 1

  for i in range(position, len(list)):
      list[i] = 0

  return list


moves_zeros([0, 1, 0, 3, 12])

def moves_zeros(list):
  position = 0
  for index in list:
        if index != 0:
            list[position] = index
            position += 1

  for i in range(position, len(list)):
      list[i] = 0

  return list


moves_zeros([0, 1, 0, 3, 12])

13.	Find the Kth Largest Element:
○	Question: Find the Kth largest element in an array.
○	Logic: Use techniques like quickselect or a max-heap to find the Kth largest element efficiently.
○	Sample Input: [3, 2, 1, 5, 6, 4], K = 2
○	Expected Output: 5

2.	Remove Duplicates from a List:
○	Question: Write a function to remove duplicate elements from a list.
○	Logic: Use a loop or convert the list to a set and back to a list.
○	Sample Input: [1, 2, 2, 3, 4, 4, 5]
○	Expected Output: [1, 2, 3, 4, 5]

def remove_duplicates(list):

  for x in list:
    pass




remove_duplicates([1, 2, 2, 3, 4, 4, 5])

def remove_duplicates(list):
  unique_list = []
  for item in list:
      if item not in unique_list:
          unique_list.append(item)
  return unique_list



remove_duplicates([1, 2, 2, 3, 4, 4, 5])

# 2.	Remove Duplicate elements from a List:
# ○	Sample Input: [1, 2, 2, 3, 4, 4, 5],   element = 2
# ○	Expected Output: [1, 2, 3, 4, 4, 5]

def remove_element(list, element):
  for value in list:
    if value == element:
      list.remove(value)
  return list


remove_element([1, 2, 2, 3, 4, 4, 5], 2)

def merge_two_list(list1, list2):
  list1.extend(list2)
  return sorted(list1)

def merge_two_list2(list1, list2):
  return sorted(list1 + list2)

list1 = [3, 0, 1, 5, 10, 0]
list2 = [4, 3, 2]

print(merge_two_list(list1, list2))
print(merge_two_list2(list1, list2))

'''
3.	Reverse a List:
○	Question: Write a function to reverse the order of elements in a list.
○	Logic: Use list slicing or a loop to reverse the elements.
○	Sample Input: [1, 2, 3, 4, 5]
○	Expected Output: [5, 4, 3, 2, 1]


'''

'''
4.	Check for Palindromic List:
○	Question: Write a function to check if a list is a palindrome.
○	Logic: Compare the list with its reverse.
○	Sample Input: [1, 2, 3, 2, 1]
○	Expected Output: Palindrome
'''




def is_palindromic(list):
    if list == list[::-1]:
        return "Palindrome"
    else:
        return "Not a palindrome"

is_palindromic([1, 2, 3, 2, 1])

def is_palindromic(list):
    if list == list[::-1]:
        return True
    else:
        return False




if is_palindromic([1, 2, 3, 2, 1]):
  print("Palindrome")
else:
  print("Not a Palindrome")

# Modules

import math

a = 10.9

math.floor(a)

math.ceil(a)

# Modules

import math as m

a = 10.9

m.floor(a)

# Modules

from math import floor

a = 10.9

math.floor(a)

import random

random.randint(0, 9)

random.randint(0, 1001)

# generate otp

for x in range(4):
  print(random.randint(0, 9), end = " ")

import random
machine = random.randint(1, 11)
print(machine)
while True:

  user = int(input("Enter Number : "))

  if machine == user:
    print("You won...")
    break
  else:
    print("Try again....")

# machine ---> 97

# user --> 50 ---> num > machine ---> guess lower
#             ---> num < machine ---> guess higher
#             ---> num == machine --> you won

import random
machine = random.randint(1, 100)
user = int(input("Enter Number : "))

while True:

  if machine == user:
    print("You won...")
    break
  elif machine > user:
    print("Guess Higher...")
  elif machine < user:
    print("Guess lower...")

  user = int(input("Enter Number : "))

import random
machine = random.randint(1, 100)
user = int(input("Enter Number : "))
counter = 0

while True:

  if machine == user:
    counter += 1
    print("You won..., Attempt : ", counter)
    break
  elif machine > user:
    print("Guess Higher...")
    counter +=1
  elif machine < user:
    print("Guess lower...")
    counter +=1

  user = int(input("Enter Number : "))

Student Data:

  1. Registration
  2. Student list
  3. delete student
  4. update
  4. exit


  1. Registration
          -> name
          -> age
          -> contact
          -> gender


2. display list

3. delete student

      student provide registeration number

      if student found :
        delete student successfully

      otherwise print message
           --> student not found

4. update
        student provide registeration number

      if student found :

          1. name
          2. gender
          3. contact
          4. age

         update successfully

      otherwise print message
           --> student not found

student_data = {}
register_no = 10000000100



while True:

  print('''
      1. Registration
      2. Student list
      3. delete student
      4. update
      4. exit
  ''')

  user_input = int(input("Choose Option : "))


  if user_input == 1:
    register_no += 1
    name, gender, contact, age = input("Enter Name : "), input("Enter Gender : "), input("Enter Contact : "), input("Enter age : ")

    student_data[register_no] = [name, age, gender, contact]

    print(f"Your name is {name} and Register No : {register_no}")

  elif user_input == 2:
    pass

  elif user_input == 3:
    pass


  elif user_input == 4:

    reg_no = int(input("Enter Reg No : "))

    reg_stu = student_data[reg_no]

    if reg_no in student_data:
      print(f"Student Fount and Reg No {reg_no}")

      print('''
          1. Name
          2. Gender
          3. Contact
          4. Age
          5. Exit
      ''')
      choice = int(input("Enter Choice : "))

      while True:

        if choice == 1:
          reg_stu[0] = input("Enter name : ")

        elif choice == 2:
          reg_stu[0] = input("Enter Gender : ")

        elif choice == 3:
          reg_stu[0] = input("Enter Contact : ")


        elif choice == 4:
          reg_stu[0] = input("Enter Age : ")

        elif choice == 5:
          break

        choice = int(input("Enter Choice : "))

  elif user_input == 5:
    pass
    break

